# Hyperswitch Agent - Connector Integration Rules

## RULE ENFORCEMENT: THESE RULES ARE MANDATORY AND NON-NEGOTIABLE
All rules marked with [MANDATORY], [MUST], [CRITICAL] are strict requirements.
Failure to follow any rule will result in incomplete or incorrect integration.

It contains all the information needed to integrate a connector into the hyperswitch system.

## STEP 0: PREREQUISITE CHECK [MANDATORY]
[Initial step ignore if already exist in root of the project] [MUST]
move .clinerules to root of the project
VALIDATION: Verify .clinerules exists in root before proceeding

## STEP 1: CRITICAL FIRST STEP - COMPLETE FILE READING [MANDATORY]
[STOP] DO NOT PROCEED WITH ANY INTEGRATION UNTIL ALL FILES ARE READ
[MANDATORY] Before starting ANY connector integration or process:

### File Reading Protocol (EXECUTE IN EXACT ORDER):
1. **VERIFY GUIDES DIRECTORY EXISTS** - Check guides/ folder structure
2. **READ ALL FILES IN SEQUENCE** - Follow numbered order below
3. **VALIDATE UNDERSTANDING** - Confirm content comprehension before next file
4. **DOCUMENT GAPS** - Note any missing files or incomplete information
5. **ONLY AFTER ALL FILES READ** - Proceed to integration steps

### MANDATORY FILE READING ORDER (NO EXCEPTIONS):
**Phase 1: Core Integration Knowledge**
1. FIRST: guides/connector_integration_guide.md [CRITICAL - INTEGRATION BLUEPRINT]
   - VALIDATION: Summarize key integration steps after reading
2. SECOND: guides/patterns/patterns.md [CRITICAL - REUSABLE SOLUTIONS]
   - VALIDATION: Identify applicable patterns for current connector
3. THIRD: guides/errors/errors.md [CRITICAL - ERROR PREVENTION]
   - VALIDATION: List common pitfalls to avoid

**Phase 2: Implementation Context**
4. FOURTH: guides/learnings/learnings.md [CRITICAL - LESSONS LEARNED]
   - VALIDATION: Extract relevant lessons for current integration
5. FIFTH: guides/types/types.md [CRITICAL - TYPE DEFINITIONS]
   - VALIDATION: Understand all type requirements
6. SIXTH: guides/integrations/integrations.md [REFERENCE - PREVIOUS WORK]
   - VALIDATION: Identify similar past integrations

**Phase 3: Root Context Analysis**
7. SEVENTH: Root directory scan for relevant files
   - VALIDATION: List all files that will be referenced/modified

## STEP 2: INTEGRATION REQUIREMENTS [MANDATORY]
FOR CONNECTOR INTEGRATION YOU MUST USE REFERENCES FROM ROOT FOLDER ONLY
- NO external dependencies without root folder validation
- ALL patterns must exist in guides/patterns/
- ALL types must be documented in guides/types/

## STEP 3: GUIDES DIRECTORY MANAGEMENT [MANDATORY]
guides/ - Persistent connector lessons repository [REMEMBER]
**Rules for guides/ directory:**
- Documents errors, solutions, and best practices [REMEMBER]
- Max 500 lines per file, create continuation files when needed [REMEMBER]
- Never reset this folder [CRITICAL]
- Update files during integration process [MANDATORY]

**Directory Structure (MUST MAINTAIN):**
```
guides/
├── connector_integration_guide.md [BLUEPRINT - MUST FOLLOW]
├── patterns/
│   └── patterns.md [REUSABLE SOLUTIONS]
├── errors/
│   └── errors.md [COMMON ISSUES & FIXES]
├── learnings/
│   └── learnings.md [IMPLEMENTATION WISDOM]
├── types/
│   └── types.md [TYPE DEFINITIONS]
└── integrations/
    └── integrations.md [HISTORICAL REFERENCE]
```

## STEP 4: INTEGRATION EXECUTION [MANDATORY]
[AFTER READING ALL FILES] Execute integration following these rules:
1. **Follow connector_integration_guide.md exactly**
2. **Apply relevant patterns from patterns.md**
3. **Avoid errors documented in errors.md**
4. **Implement lessons from learnings.md**
5. **Use types from types.md**
6. **Reference similar work from integrations.md**

## STEP 5: KNOWLEDGE UPDATE [MANDATORY]
Update ALL relevant files based on learnings during the integration process:
- Add new patterns discovered
- Document new errors encountered
- Record lessons learned
- Update type definitions if needed
- Add integration details to integrations.md

## STEP 6: TESTING REQUIREMENTS [MANDATORY]
[FOR CYPRESS TEST, ALWAYS CHECK WITH plan and specs doc in the integrations.]
- Validate against existing test plans
- Follow specification documents
- This may or may not be related to the current task