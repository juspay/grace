You are an expert AI agent to do deep research to gather technical information for integrating the payment gateway. Your goal is to produce a detailed, structured OpenAPI spec for the connector in the specified format that covers all aspects required for a production and sandbox -ready integration focusing on the all payment methods. 

Follow these instructions meticulously, avoiding assumptions and ensuring accuracy by cross-referencing multiple sources. If information is missing, note it and suggest follow-up actions.

Format of the OUTPUT —> [every thing should be properly gathered to maintain high accuracy of the details without making any assumptions.]

openapi: 3.0.3
info:
 title: "{{CONNECTOR_NAME}} Connector Integration Specification"
 description: |
   Minimal specification for perfect codegen of a {{CONNECTOR_NAME}} connector.
  This contains only the essential fields needed to generate complete connector code.
 version: 1.0.0


components:
 schemas:
   # ================================
   # Connector Metadata (Required for codegen)
   # ================================
   CONNECTOR_NAME\ConnectorSpec:
     type: object
     required:
       - connector_name
       - connector_enum
       - auth_type
       - supported_flows
       - api_endpoints
       - transformers
     properties:
       connector_name:
         type: string
         example: "{{CONNECTOR_NAME}}"
         description: "Connector struct name for Rust codegen"


       connector_enum:
         type: string
         example: "{{CONNECTOR_NAME}}"
         description: "Enum variant in ConnectorEnum"


       display_name:
         type: string
         example: "{{CONNECTOR_NAME}} Payment Processor"


       base_url:
         type: string
         example: "https://api.{{CONNECTOR_NAME}}.com"


       auth_type:
         $ref: '#/components/schemas/AuthConfig'


       supported_flows:
         type: array
         items:
           $ref: '#/components/schemas/FlowConfig'
         description: "List of flows this connector supports"


       api_endpoints:
         type: object
         additionalProperties:
           $ref: '#/components/schemas/EndpointConfig'
         description: "API endpoints for each flow"


       transformers:
         type: object
         additionalProperties:
           $ref: '#/components/schemas/TransformerConfig'
         description: "Request/response transformers for each flow"


   # ================================
   # Authentication (Essential for all connectors)
   # ================================
   AuthConfig:
     type: object
     required:
       - type
       - implementation
     properties:
       type:
         type: string
         enum: [HeaderKey, BodyKey, SignatureKey, MultiAuthKey, NoKey]
         example: "HeaderKey"


       implementation:
         type: object
         description: "How to extract and use auth in code"
         properties:
           header_name:
             type: string
             example: "X-API-Key"
           auth_field:
             type: string
             example: "api_key"
             description: "Field name in ConnectorAuthType struct"


   # ================================
   # Flow Configuration (Core for codegen)
   # ================================
   FlowConfig:
     type: object
     required:
       - flow_type
       - required
       - request_type
       - response_type
     properties:
       flow_type:
         type: string
         enum: [
           "Authorize", "Capture", "Void", "PSync", "Refund", "RSync",
           "SetupMandate", "Accept", "SubmitEvidence", "DefendDispute"
         ]
         example: "Authorize"


       required:
         type: boolean
         description: "Whether this flow must be implemented"
         example: true


       request_type:
         type: string
         description: "Rust type for request transformation"
         example: "{{CONNECTOR_NAME}}PaymentRequest"


       response_type:
         type: string
         description: "Rust type for response transformation"
         example: "{{CONNECTOR_NAME}}PaymentResponse"


   # ================================
   # API Endpoint Configuration
   # ================================
   EndpointConfig:
     type: object
     required:
       - method
       - path
       - content_type
     properties:
       method:
         type: string
         enum: [GET, POST, PUT, PATCH, DELETE]
         example: "POST"


       path:
         type: string
         description: "API path with placeholders"
         example: "/v1/payments"


       content_type:
         type: string
         example: "application/json"


       path_params:
         type: array
         items:
           type: string
         description: "Variables in path like {payment_id}"
         example: []


   # ================================
   # Data Transformation Configuration
   # ================================
   TransformerConfig:
     type: object
     required:
       - request_mapping
       - response_mapping
     properties:
       request_mapping:
         type: object
         description: "How to map from RouterData to connector request"
         additionalProperties:
           $ref: '#/components/schemas/FieldMapping'


       response_mapping:
         type: object
         description: "How to map from connector response to RouterData"
         additionalProperties:
           $ref: '#/components/schemas/FieldMapping'


       amount_conversion:
         type: string
         enum: [minor_units, major_units, string_minor]
         example: "minor_units"
         description: "How connector expects amount format"


   FieldMapping:
     type: object
     properties:
       source_path:
         type: string
         description: "JSONPath to source field"
         example: "$.request.amount"


       target_path:
         type: string
         description: "JSONPath to target field"
         example: "$.amount"


       transformation:
         type: string
         enum: [direct, currency_conversion, date_format, custom]
         example: "direct"


       custom_function:
         type: string
         description: "Custom Rust function name for complex transformations"


# ================================
# Complete Example for {{CONNECTOR_NAME}} Connector
# ================================
example_{{CONNECTOR_NAME_LOWER}}_connector:
 connector_name: "{{CONNECTOR_NAME}}"
 connector_enum: "{{CONNECTOR_NAME}}"
 display_name: "{{CONNECTOR_DISPLAY_NAME}}"
 base_url: "{{CONNECTOR_BASE_URL}}"


 auth_type:
   type: "HeaderKey"
   implementation:
     header_name: "X-API-Key"
     auth_field: "api_key"


 supported_flows:
   - flow_type: "Authorize"
     required: true
     request_type: "{{CONNECTOR_NAME}}PaymentRequest"
     response_type: "{{CONNECTOR_NAME}}PaymentResponse"


   - flow_type: "Capture"
     required: true
     request_type: "{{CONNECTOR_NAME}}CaptureRequest"
     response_type: "{{CONNECTOR_NAME}}CaptureResponse"


   - flow_type: "Refund"
     required: true
     request_type: "{{CONNECTOR_NAME}}RefundRequest"
     response_type: "{{CONNECTOR_NAME}}RefundResponse"


 api_endpoints:
   Authorize:
     method: "POST"
     path: "{{AUTHORIZE_ENDPOINT}}"
     content_type: "application/json"


   Capture:
     method: "POST"
     path: "{{CAPTURE_ENDPOINT}}"
     content_type: "application/json"
     path_params: ["payment_id"]


   Refund:
     method: "POST"
     path: "{{REFUND_ENDPOINT}}"
     content_type: "application/json"
     path_params: ["payment_id"]


 transformers:
   Authorize:
     request_mapping:
       amount:
         source_path: "$.request.minor_amount"
         target_path: "$.amount"
         transformation: "direct"
       currency:
         source_path: "$.request.currency"
         target_path: "$.currency"
         transformation: "direct"
       payment_method:
         source_path: "$.request.payment_method_data"
         target_path: "$.payment_method"
         transformation: "custom"
         custom_function: "transform_payment_method"


     response_mapping:
       status:
         source_path: "$.status"
         target_path: "$.status"
         transformation: "custom"
         custom_function: "map_payment_status"
       transaction_id:
         source_path: "$.id"
         target_path: "$.connector_transaction_id"
         transformation: "direct"


     amount_conversion: "minor_units"


   Capture:
     request_mapping:
       amount:
         source_path: "$.request.amount_to_capture"
         target_path: "$.amount"
         transformation: "direct"


     response_mapping:
       status:
         source_path: "$.status"
         target_path: "$.status"
         transformation: "custom"
         custom_function: "map_capture_status"


     amount_conversion: "minor_units"


   Refund:
     request_mapping:
       amount:
         source_path: "$.request.refund_amount"
         target_path: "$.amount"
         transformation: "direct"
       reason:
         source_path: "$.request.reason"
         target_path: "$.reason"
         transformation: "direct"


     response_mapping:
       refund_id:
         source_path: "$.id"
         target_path: "$.connector_refund_id"
         transformation: "direct"
       status:
         source_path: "$.status"
         target_path: "$.refund_status"
         transformation: "custom"
         custom_function: "map_refund_status"


     amount_conversion: "minor_units"



### Instructions
2. **Output Format**:
   - Structure the openapi spec in clear sections as outlined above.
   - Note any missing information and suggest how to obtain it (e.g., contacting [connector name] support).

3. **Research Steps**:
   - **Identify Connector Details**: Confirm [connector name]’s official website, API documentation URL, and developer portal.
   - **Analyze API Specifications**: Gather endpoint URLs, HTTP methods, request/response structures, and authentication mechanisms.
   - **Address Edge Cases**: Note any connector-specific behaviors (e.g., currency unit handling, 3DS requirements).

4. **Constraints**:
   - Do not assume details not explicitly stated in documentation or reliable sources.
   - Prioritize production-ready information, avoiding sandbox-only or deprecated features.
   - If documentation is unclear, suggest contacting [connector name]’s support or checking community forums.
