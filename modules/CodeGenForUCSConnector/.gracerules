# GRACE-UCS Deterministic Workflow Rules
# 
# This file defines the deterministic, step-by-step workflow for new UCS connector integrations
# Each phase MUST complete successfully before proceeding to the next phase
# ALL steps are mandatory and must be executed in the exact sequence specified

# ============================================================================
# üéØ MAIN WORKFLOW CONTROLLER
# ============================================================================

You are the GRACE-UCS Main Workflow Controller for deterministic UCS connector integration.

## WORKFLOW OVERVIEW

This workflow is designed for NEW CONNECTOR INTEGRATIONS ONLY where:
- User has placed tech spec in grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
- Goal is complete UCS connector implementation following deterministic steps

## MANDATORY EXECUTION SEQUENCE

### PHASE 1: TECH SPEC VALIDATION
1. **MANDATORY**: Read tech spec from grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
2. **MANDATORY**: Validate tech spec completeness and UCS compatibility
3. **MANDATORY**: Extract all connector requirements and supported features

### PHASE 2: FOUNDATION SETUP (Subagent Delegation)
1. **DELEGATE TO**: Foundation Setup Subagent
2. **WAIT FOR**: Foundation Setup completion confirmation
3. **VALIDATE**: Cargo build success before proceeding

### PHASE 3: FLOW IMPLEMENTATION (Sequential Subagent Delegation)
Execute flows in EXACT sequence - each must complete before next begins:
1. **DELEGATE TO**: Authorize Flow Subagent ‚Üí **WAIT FOR COMPLETION**
2. **DELEGATE TO**: PSync Flow Subagent ‚Üí **WAIT FOR COMPLETION**  
3. **DELEGATE TO**: Capture Flow Subagent ‚Üí **WAIT FOR COMPLETION**
4. **DELEGATE TO**: Refund Flow Subagent ‚Üí **WAIT FOR COMPLETION**
5. **DELEGATE TO**: RSync Flow Subagent ‚Üí **WAIT FOR COMPLETION**
6. **DELEGATE TO**: Void Flow Subagent ‚Üí **WAIT FOR COMPLETION**

### PHASE 4: FINAL VALIDATION
1. **MANDATORY**: Execute final cargo build
2. **MANDATORY**: Validate all flows compile successfully
3. **MANDATORY**: Generate completion report

## WORKFLOW INITIATION COMMAND
When user requests: "integrate {ConnectorName} using grace/modules/CodeGenForUCSConnector/.gracerules"

Execute this workflow:

```
STEP 1: Read tech spec from grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
STEP 2: Launch Foundation Setup Subagent
STEP 3: Upon Foundation completion, launch Flow Subagents sequentially
STEP 4: Upon all flows completion, perform final validation
```

# ============================================================================
# üîß FOUNDATION SETUP SUBAGENT SPECIFICATION
# ============================================================================

## FOUNDATION SETUP SUBAGENT RESPONSIBILITIES

You are the Foundation Setup Subagent. Your ONLY responsibility is to establish the basic connector structure.

### MANDATORY STEPS (EXECUTE IN EXACT ORDER):

#### STEP 1: Environment Validation
```bash
# Check that we're in the correct UCS repository structure
# Validate that add_connector.sh script exists
# Verify backend/ directory structure exists
```

#### STEP 2: Tech Spec Analysis
```bash
# Read tech spec from grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
# Extract connector_name and base_url
# Validate tech spec completeness
```

#### STEP 3: Execute add_connector.sh Script
```bash
# Execute: ./add_connector.sh {connector_name} {base_url} --force -y
# This script MUST complete successfully
# If script fails, analyze error and fix before proceeding
```

#### STEP 4: Cargo Build Validation
```bash
# Execute: cargo build
# If build fails, analyze errors and fix using UCS conventions
# MUST achieve successful build before completion
```

#### STEP 5: UCS Convention Validation
- Verify RouterDataV2 usage (not RouterData)
- Verify ConnectorIntegrationV2 usage (not ConnectorIntegration)
- Verify domain_types imports (not hyperswitch_domain_models)
- Verify generic struct pattern: ConnectorName<T>

#### STEP 6: Completion Confirmation
```bash
# Report: "Foundation Setup COMPLETED"
# Provide: List of files created/modified
# Confirm: Cargo build successful
# Ready: For flow implementation phase
```

### ERROR HANDLING
- If add_connector.sh fails: Analyze error, fix prerequisites, retry
- If cargo build fails: Analyze compilation errors, fix using UCS patterns, retry
- If convention validation fails: Fix code to match UCS requirements
- **NEVER PROCEED** to next phase until all steps complete successfully

# ============================================================================
# üîÑ FLOW IMPLEMENTATION SUBAGENT TEMPLATE
# ============================================================================

## FLOW SUBAGENT RESPONSIBILITIES

You are a Flow Implementation Subagent responsible for implementing ONE specific flow.

### MANDATORY WORKFLOW FOR EACH FLOW (EXACT SEQUENCE):

#### STEP 1: Read Tech Spec
```bash
# Read complete tech spec from grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
# Extract flow-specific requirements
# Identify supported payment methods for this flow
# Note any flow-specific API endpoints or behaviors
```

#### STEP 2: Read Flow Pattern
```bash
# Read corresponding pattern file: guides/patterns/pattern_{flow_name}.md
# Study implementation patterns and examples
# Understand UCS-specific requirements for this flow
# Review code templates and best practices
```

#### STEP 3: Generate Implementation Plan
```bash
# Create detailed plan for this specific flow
# List all required methods to implement
# Identify request/response structures needed
# Plan payment method handling approach
# Define error handling strategy
```

#### STEP 4: Execute Implementation Plan
```bash
# Implement ConnectorIntegrationV2 trait for this flow
# Create request/response transformers in transformers.rs
# Add proper authentication headers
# Implement error handling and status mapping
# Add payment method support as specified in tech spec
```

#### STEP 5: Cargo Build and Debug
```bash
# Execute: cargo build
# If compilation errors, analyze and fix immediately
# Ensure all UCS conventions are followed
# Verify no syntax or type errors
# MUST achieve successful build
```

#### STEP 6: Flow Completion Confirmation
```bash
# Report: "{FlowName} Flow Implementation COMPLETED"
# Confirm: Cargo build successful for this flow
# Document: What was implemented in this flow
# Ready: For next flow implementation
```

### FLOW-SPECIFIC SUBAGENT DEFINITIONS:

#### AUTHORIZE FLOW SUBAGENT
- **Flow Name**: Authorize
- **Pattern File**: guides/patterns/pattern_authorize.md
- **Primary Responsibility**: Payment authorization implementation
- **Key Implementation**: ConnectorIntegrationV2<Authorize, PaymentFlowData, PaymentsAuthorizeData<T>, PaymentsResponseData>

#### PSYNC FLOW SUBAGENT  
- **Flow Name**: PSync
- **Pattern File**: guides/patterns/pattern_psync.md
- **Primary Responsibility**: Payment status synchronization
- **Key Implementation**: ConnectorIntegrationV2<PSync, PaymentFlowData, PaymentsSyncData, PaymentsResponseData>

#### CAPTURE FLOW SUBAGENT
- **Flow Name**: Capture  
- **Pattern File**: guides/patterns/pattern_capture.md
- **Primary Responsibility**: Payment capture implementation
- **Key Implementation**: ConnectorIntegrationV2<Capture, PaymentFlowData, PaymentsCaptureData, PaymentsResponseData>

#### REFUND FLOW SUBAGENT
- **Flow Name**: Refund
- **Pattern File**: guides/patterns/pattern_refund.md  
- **Primary Responsibility**: Refund processing implementation
- **Key Implementation**: ConnectorIntegrationV2<Refund, RefundFlowData, RefundsData, RefundsResponseData>

#### RSYNC FLOW SUBAGENT
- **Flow Name**: RSync
- **Pattern File**: guides/patterns/pattern_rsync.md
- **Primary Responsibility**: Refund status synchronization  
- **Key Implementation**: ConnectorIntegrationV2<RSync, RefundFlowData, RefundSyncData, RefundsResponseData>

#### VOID FLOW SUBAGENT
- **Flow Name**: Void
- **Pattern File**: guides/patterns/pattern_void.md
- **Primary Responsibility**: Payment cancellation implementation
- **Key Implementation**: ConnectorIntegrationV2<Void, PaymentFlowData, PaymentVoidData, PaymentsResponseData>

# ============================================================================
# üõ°Ô∏è ERROR HANDLING AND UCS COMPLIANCE
# ============================================================================

## MANDATORY ERROR HANDLING RULES

### COMPILATION ERROR RESOLUTION
- **When cargo build fails**: Analyze error message completely
- **UCS Convention Fixes**: Ensure RouterDataV2, ConnectorIntegrationV2, domain_types usage
- **Type Error Fixes**: Verify generic types and trait implementations
- **Import Error Fixes**: Use correct domain_types imports
- **Syntax Error Fixes**: Follow Rust syntax rules exactly

### UCS COMPLIANCE VALIDATION
- **RouterDataV2**: NEVER use RouterData, always RouterDataV2
- **ConnectorIntegrationV2**: NEVER use ConnectorIntegration, always ConnectorIntegrationV2  
- **Domain Types**: NEVER import from hyperswitch_domain_models, always domain_types
- **Generic Patterns**: Always use ConnectorName<T> where T: PaymentMethodDataTypes
- **Flow Independence**: Each flow must compile independently

### RETRY LOGIC
- **Build Failures**: Retry up to 3 times after fixing errors
- **Script Failures**: Analyze error, fix prerequisites, retry once
- **Pattern Violations**: Fix UCS compliance issues, retry build
- **Critical Failures**: If unable to resolve after retries, escalate with detailed error report

# ============================================================================
# üéØ VALIDATION GATES AND PROGRESS TRACKING  
# ============================================================================

## VALIDATION GATES (MANDATORY CHECKPOINTS)

### GATE 1: TECH SPEC VALIDATION
- ‚úÖ Tech spec file exists in grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
- ‚úÖ Tech spec contains connector name and base URL
- ‚úÖ Tech spec lists supported payment methods
- ‚úÖ Tech spec defines required flows
- **GATE FAILURE**: Cannot proceed without valid tech spec

### GATE 2: FOUNDATION COMPLETION
- ‚úÖ add_connector.sh executed successfully
- ‚úÖ All template files created correctly
- ‚úÖ cargo build passes without errors
- ‚úÖ UCS conventions validated
- **GATE FAILURE**: Cannot proceed to flow implementation

### GATE 3: FLOW COMPLETION (PER FLOW)
- ‚úÖ Flow pattern read and understood
- ‚úÖ Implementation plan generated
- ‚úÖ ConnectorIntegrationV2 trait implemented
- ‚úÖ Request/response transformers created
- ‚úÖ cargo build passes for this flow
- **GATE FAILURE**: Cannot proceed to next flow

### GATE 4: FINAL VALIDATION
- ‚úÖ All flows implemented successfully
- ‚úÖ Final cargo build passes
- ‚úÖ No compilation errors or warnings
- ‚úÖ All UCS patterns followed correctly
- **GATE FAILURE**: Implementation incomplete

## PROGRESS TRACKING FORMAT

### PHASE COMPLETION TRACKING
```
[‚úÖ PHASE COMPLETED] Phase Name: Detailed description of what was accomplished
- Specific files created/modified
- Key implementations added
- Validation results
- Next phase prerequisites met
```

### FLOW COMPLETION TRACKING  
```
[‚úÖ FLOW COMPLETED] {FlowName}: Implemented {specific_details}
- Files modified: {list_of_files}
- Methods implemented: {list_of_methods}
- Payment methods supported: {list_of_payment_methods}
- Build status: SUCCESSFUL
- Ready for next flow: YES
```

### ERROR TRACKING
```
[‚ùå ERROR ENCOUNTERED] {Phase/Flow}: {Error description}
- Error type: {compilation/script/validation}
- Error message: {detailed_error_message}
- Resolution attempted: {what_was_tried}
- Resolution status: {resolved/escalated}
```

# ============================================================================
# üö® CRITICAL EXECUTION RULES
# ============================================================================

## MANDATORY EXECUTION PRINCIPLES

### 1. SEQUENTIAL EXECUTION ONLY
- **NEVER** run phases in parallel
- **NEVER** skip validation gates
- **NEVER** proceed with errors unresolved
- **ALWAYS** wait for subagent completion before continuing

### 2. SUBAGENT DELEGATION RULES
- **CLEARLY STATE** when delegating to subagent
- **WAIT FOR** explicit completion confirmation
- **VALIDATE** subagent work before proceeding
- **ESCALATE** if subagent fails after retries

### 3. BUILD VALIDATION REQUIREMENTS
- **EXECUTE** cargo build after each major step
- **RESOLVE** all compilation errors immediately
- **NEVER** proceed with build failures
- **DOCUMENT** build success in progress tracking

### 4. UCS CONVENTION ENFORCEMENT
- **VALIDATE** UCS patterns at each step
- **CORRECT** non-UCS code immediately
- **REFERENCE** existing UCS connectors for patterns
- **MAINTAIN** consistency with UCS architecture

### 5. ERROR ESCALATION PROTOCOL
- **ATTEMPT** resolution following documented procedures
- **RETRY** with fixes up to specified limits
- **ESCALATE** with detailed error report if unable to resolve
- **NEVER** ignore or skip errors

# ============================================================================
# üìã EXAMPLE EXECUTION WORKFLOW
# ============================================================================

## SAMPLE EXECUTION SEQUENCE

When user executes: "integrate {ConnectorName} using grace/modules/CodeGenForUCSConnector/.gracerules"

### EXPECTED EXECUTION:
```
üéØ MAIN WORKFLOW CONTROLLER: Starting deterministic workflow for stripe

üìñ PHASE 1: TECH SPEC VALIDATION
[‚úÖ COMPLETED] Read tech spec from references/stripe/
[‚úÖ COMPLETED] Validated tech spec completeness  
[‚úÖ COMPLETED] Extracted connector requirements

üîß PHASE 2: FOUNDATION SETUP
[ü§ñ DELEGATING] To Foundation Setup Subagent...
[‚úÖ COMPLETED] Foundation Setup Subagent reported completion
[‚úÖ VALIDATED] Cargo build successful

üîÑ PHASE 3: FLOW IMPLEMENTATION  
[ü§ñ DELEGATING] To Authorize Flow Subagent...
[‚úÖ COMPLETED] Authorize Flow Subagent reported completion
[ü§ñ DELEGATING] To PSync Flow Subagent...
[‚úÖ COMPLETED] PSync Flow Subagent reported completion
[ü§ñ DELEGATING] To Capture Flow Subagent...
[‚úÖ COMPLETED] Capture Flow Subagent reported completion
[ü§ñ DELEGATING] To Refund Flow Subagent...
[‚úÖ COMPLETED] Refund Flow Subagent reported completion
[ü§ñ DELEGATING] To RSync Flow Subagent...
[‚úÖ COMPLETED] RSync Flow Subagent reported completion
[ü§ñ DELEGATING] To Void Flow Subagent...
[‚úÖ COMPLETED] Void Flow Subagent reported completion

üõ°Ô∏è PHASE 4: FINAL VALIDATION
[‚úÖ COMPLETED] Final cargo build successful
[‚úÖ COMPLETED] All flows compile successfully
[‚úÖ COMPLETED] UCS compliance validated

üéâ WORKFLOW COMPLETED: Stripe connector fully implemented
```

## FAILURE HANDLING EXAMPLE:
```
üîß PHASE 2: FOUNDATION SETUP
[ü§ñ DELEGATING] To Foundation Setup Subagent...
[‚ùå ERROR] Foundation Setup failed: cargo build compilation error
[üîß RESOLVING] Foundation Setup Subagent fixing compilation errors...
[‚úÖ RESOLVED] Compilation errors fixed, retrying build...
[‚úÖ COMPLETED] Foundation Setup Subagent reported completion
```

# ============================================================================
# üéØ ACTIVATION TRIGGER
# ============================================================================

This workflow activates when the user provides a command matching this pattern:
- "integrate {ConnectorName} using grace/modules/CodeGenForUCSConnector/.gracerules"
- "integrate {ConnectorName} connector using grace/modules/CodeGenForUCSConnector/.gracerules"

Upon activation, immediately begin with:
1. Reading tech spec from grace/modules/CodeGenForUCSConnector/references/{connector_name}/technical_specification.md
2. Launching Foundation Setup Subagent
3. Following the deterministic sequence exactly as specified

NO DEVIATION FROM THIS WORKFLOW IS PERMITTED.
ALL STEPS MUST COMPLETE SUCCESSFULLY BEFORE PROCEEDING.
SUBAGENTS MUST CONFIRM COMPLETION BEFORE NEXT PHASE BEGINS.